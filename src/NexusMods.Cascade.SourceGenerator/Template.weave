@namespace NexusMods.Cascade.SourceGenerator
@methodname RenderModel
@model RowDefinitionAnalyzer
@using System.Linq

#nullable enable

namespace {{= model.Namespace}};

using global::System;
using global::System.Linq;
using global::System.Collections;
using global::System.Collections.Generic;
using global::R3;
using global::NexusMods.Cascade.Abstractions;
using global::NexusMods.Cascade.Abstractions.Diffs;
using global::Clarp.Concurrency;

public partial record struct {{= model.Name}} : IRowDefinition<{{= model.PrimaryKey.Type}}>, IComparable<{{= model.Name}}>
{
    public {{= model.PrimaryKey.Type}} RowId => {{= model.PrimaryKey.Name}};

    /// <summary>
    /// Implicitly converts a tuple to a {{= model.Name}}
    /// </summary>
    public static implicit operator {{= model.Name}}(({{= model.PrimaryKey.Type}}, {{= string.Join(", ", model.Members.Select(m => m.Type))}}) tuple)
    {
        return new {{= model.Name}}(
        tuple.Item1
        {{each member in model.Members}}
        ,tuple.Item{{= member.Index + 2}}
        {{/each}}
        );
    }

    public int CompareTo({{= model.Name}} other)
    {
        var cmp = GlobalCompare.Compare(RowId, other.RowId);
        if (cmp != 0)
          return cmp;

        {{each member in model.Members}}
        cmp = GlobalCompare.Compare({{= member.Name}}, other.{{= member.Name}});
        if (cmp != 0) return cmp;
        {{/each}}
        return 0;
    }


    public sealed class Active : global::NexusMods.Cascade.Abstractions.IActiveRow<{{=model.Name}}, {{=model.PrimaryKey.Type}}>, IDisposable
    {
       private readonly Ref<({{= model.Name}} Base, int Delta)> _data;

       private Active({{= model.Name}} seedData, int initialDelta)
       {
          _data = new Ref<({{= model.Name}} Base, int Delta)>((seedData, initialDelta));
          RowId = seedData.{{= model.PrimaryKey.Name}};
       }

       public static IActiveRow<{{= model.Name}}, {{= model.PrimaryKey.Type}}> Create({{= model.Name}} seedData, int initialDelta)
       {
          return new Active(seedData, initialDelta);
       }

       public {{= model.PrimaryKey.Type}} RowId { get; }

       public int _Delta => _data.Value.Delta;

       public void Update(in {{= model.Name}} newData, int delta)
       {
         _data.Value = (newData, _data.Value.Delta + delta);
       }

       public void Dispose()
       {

       }

       {{each member in model.Members}}
        public {{= member.Type}} {{= member.Name}} => _data.Value.Base.{{= member.Name}};
       {{/each}}
    }
}


public static class {{= model.Name}}Extensions_Autogen
{
    public static IDiffFlow<{{= model.Name}}.Active> ToActive(this IDiffFlow<{{= model.Name}}> inputFlow)
    {
        return inputFlow.ToActive<{{= model.Name}}.Active, {{= model.Name}}, {{= model.PrimaryKey.Type}}>();
    }
}
