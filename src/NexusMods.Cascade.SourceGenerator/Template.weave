@namespace NexusMods.Cascade.SourceGenerator
@methodname RenderModel
@model RowDefinitionAnalyzer
@using System.Linq

#nullable enable

namespace {{= model.Namespace}};

using global::System;
using global::System.Linq;
using global::System.Collections;
using global::System.Collections.Generic;
using global::R3;
using global::NexusMods.Cascade.Abstractions;

using global::NexusMods.Cascade.Patterns;
using global::NexusMods.Cascade;

public partial record struct {{= model.Name}} : IRowDefinition<{{= model.PrimaryKey.Type}}>, IComparable<{{= model.Name}}>
{
    public {{= model.PrimaryKey.Type}} RowId => {{= model.PrimaryKey.Name}};

    /// <summary>
    /// Implicitly converts a tuple to a {{= model.Name}}
    /// </summary>
    public static implicit operator {{= model.Name}}(({{= model.PrimaryKey.Type}}, {{= string.Join(", ", model.Members.Select(m => m.Type))}}) tuple)
    {
        return new {{= model.Name}}(
        tuple.Item1
        {{each member in model.Members}}
        ,tuple.Item{{= member.Index + 2}}
        {{/each}}
        );
    }

    public int CompareTo({{= model.Name}} other)
    {
        var cmp = GlobalCompare.Compare(RowId, other.RowId);
        if (cmp != 0)
          return cmp;

        {{each member in model.Members}}
        cmp = GlobalCompare.Compare({{= member.Name}}, other.{{= member.Name}});
        if (cmp != 0) return cmp;
        {{/each}}
        return 0;
    }


    public sealed class Active : global::NexusMods.Cascade.IActiveRow<{{=model.Name}}, {{=model.PrimaryKey.Type}}>, IDisposable
    {
       private {{= model.Name}} _nextData;
       private int _delta;
       private int _nextDelta;

       private Active({{= model.Name}} seedData, int initialDelta)
       {
          _delta = initialDelta;
          _nextDelta = initialDelta;
          _nextData = seedData;
          RowId = seedData.{{= model.PrimaryKey.Name}};
          ApplyUpdates();
       }

       public static IActiveRow<{{= model.Name}}, {{= model.PrimaryKey.Type}}> Create({{= model.Name}} seedData, int initialDelta)
       {
          return new Active(seedData, initialDelta);
       }

       public {{= model.PrimaryKey.Type}} RowId { get; }

       public int NextDelta => _nextDelta;

       public void SetUpdate({{= model.Name}} newData, int delta)
       {
            if (delta > 0)
                _nextData = newData;
            _nextDelta += delta;
       }

       public void ApplyUpdates()
       {
           _delta = _nextDelta;
           {{each member in model.Members}}
           {{= member.Name}}.Value = _nextData.{{= member.Name}};
           {{/each}}
       }

       public BindableReactiveProperty<bool> IsDisposed { get; private set; } = new();

       public void Dispose()
       {
           IsDisposed.Value = true;
       }

       {{each member in model.Members}}
        public BindableReactiveProperty<{{= member.Type}}> {{= member.Name}} = new();
       {{/each}}
    }
}


public static class Row{{= model.Name}}Extensions_AutoGen
{
    public static Flow<{{= model.Name}}> Return{{= model.Name}}(this Pattern pattern, LVar<{{= model.PrimaryKey.Type}}> id, {{= string.Join(", ", model.Members.Select(m => $"IReturnValue<{m.Type}> {m.Name.ToLower()}"))}})
    {
        return (Flow<{{= model.Name}}>)pattern.CompileReturn(
            typeof({{= model.Name}}),
            id,
            {{= string.Join(", ", model.Members.Select(m => m.Name.ToLower()))}}
        );
    }

    public static Flow<{{= model.Name}}.Active> ToActive(this Flow<{{= model.Name}}> baseFlow)
    {
        return baseFlow.ToActive<{{= model.Name}}, {{= model.PrimaryKey.Type}}, {{= model.Name}}.Active>();
    }
}
